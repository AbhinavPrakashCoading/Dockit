// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  
  // User preferences
  rollNumber    String?
  fullName      String?   // For DOP bands
  examType      String?   // Last selected exam
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific models
model Document {
  id           String   @id @default(cuid())
  userId       String
  filename     String
  originalName String
  fileType     String
  fileSize     Int
  documentType String   // photo, certificate, etc.
  examType     String   // ssc, upsc, ielts
  uploadDate   DateTime @default(now())
  
  // DOP specific fields
  dateOfPhotography DateTime?
  hasDOPBand       Boolean  @default(false)
  
  // Validation results
  validationStatus String   @default("pending") // pending, valid, invalid
  validationErrors String?  // JSON string of errors array
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // upload, download, validation, etc.
  details     String   // JSON details
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}