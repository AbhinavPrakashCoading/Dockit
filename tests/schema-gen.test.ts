import { describe, it, expect, beforeAll } from 'vitest';
import * as pdfjs from 'pdfjs-dist';
import fs from 'fs';
import path from 'path';

/**
 * Test suite for PDF.js worker configuration
 * Ensures worker loads correctly after fixing legacy build issue
 */

describe('PDF.js Worker Configuration', () => {
  beforeAll(() => {
    // Set up worker source for testing
    if (typeof window === 'undefined') {
      pdfjs.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.mjs';
    }
  });

  it('worker loads', async () => {
    // Verify worker source is configured correctly
    expect(pdfjs.GlobalWorkerOptions.workerSrc).toContain('pdf.worker');
    // Worker should be configured (either /pdf.worker.min.mjs or default ./pdf.worker.mjs)
    expect(pdfjs.GlobalWorkerOptions.workerSrc).toBeTruthy();
  });

  it('worker file exists in public directory', () => {
    const workerPath = path.join(process.cwd(), 'public', 'pdf.worker.min.mjs');
    expect(fs.existsSync(workerPath)).toBe(true);
    
    // Verify file is not empty
    const stats = fs.statSync(workerPath);
    expect(stats.size).toBeGreaterThan(100000); // Should be >100KB (minified)
  });

  it('can load a PDF document', async () => {
    // Create a minimal PDF buffer for testing - using Uint8Array instead of Buffer
    const minimalPDF = new Uint8Array([
      0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a, // %PDF-1.4
      0x25, 0xe2, 0xe3, 0xcf, 0xd3, 0x0a, // Binary comment
      0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, // 1 0 obj
      0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, // <</Type/Catalog/Pages 2 0 R>>
      0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, // endobj
      0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, // 2 0 obj
      0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x35, 0x2f, 0x4b, 0x69, 0x64, 0x73, 0x5b, 0x33, 0x20, 0x30, 0x20, 0x52, 0x5d, 0x3e, 0x3e, 0x0a, // <</Type/Pages/Count 5/Kids[3 0 R]>>
      0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, // endobj
      0x33, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, // 3 0 obj
      0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x2f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3c, 0x3c, 0x3e, 0x3e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x6f, 0x78, 0x5b, 0x30, 0x20, 0x30, 0x20, 0x36, 0x31, 0x32, 0x20, 0x37, 0x39, 0x32, 0x5d, 0x3e, 0x3e, 0x0a, // <</Type/Page/Parent 2 0 R/Resources<</MediaBox[0 0 612 792]>>
      0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, // endobj
      0x78, 0x72, 0x65, 0x66, 0x0a, // xref
      0x30, 0x20, 0x34, 0x0a, // 0 4
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x20, 0x0a, // 0000000000 65535 f
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, // 0000000009 00000 n
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x38, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, // 0000000058 00000 n
      0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x38, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, // 0000000118 00000 n
      0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x0a, // trailer
      0x3c, 0x3c, 0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x34, 0x2f, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, // <</Size 4/Root 1 0 R>>
      0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, // startxref
      0x32, 0x35, 0x33, 0x0a, // 253
      0x25, 0x25, 0x45, 0x4f, 0x46, 0x0a // %%EOF
    ]);

    try {
      // Attempt to load the PDF document
      const loadingTask = pdfjs.getDocument({ data: minimalPDF });
      const pdf = await loadingTask.promise;
      
      // Verify we got a valid PDF document
      expect(pdf).toBeDefined();
      expect(pdf.numPages).toBeGreaterThan(0); // PDF loaded successfully
    } catch (error) {
      // If worker fails to load, this will throw an error
      throw new Error(`Failed to load PDF: ${error}`);
    }
  });

  it('worker configuration does not use legacy build', () => {
    const workerSrc = pdfjs.GlobalWorkerOptions.workerSrc;
    
    // Ensure we're not using the legacy build path
    expect(workerSrc).not.toContain('legacy');
    expect(workerSrc).not.toContain('pdf.worker.entry');
    
    // Ensure we're using the new build
    expect(workerSrc).toContain('pdf.worker');
  });
});
